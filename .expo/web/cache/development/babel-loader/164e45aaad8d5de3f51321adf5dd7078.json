{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RadioButton from \"./radioButton\";\nvar defaultSize = 20;\nvar defaultThickness = 1;\nvar defaultColor = '#007AFF';\n\nvar RadioGroup = function (_Component) {\n  _inherits(RadioGroup, _Component);\n\n  var _super = _createSuper(RadioGroup);\n\n  function RadioGroup(props, context) {\n    var _this;\n\n    _classCallCheck(this, RadioGroup);\n\n    _this = _super.call(this, props, context);\n    _this.state = {\n      selectedIndex: _this.props.selectedIndex\n    };\n    _this.prevSelected = _this.props.selectedIndex;\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RadioGroup, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.selectedIndex != this.prevSelected) {\n        this.prevSelected = nextProps.selectedIndex;\n        this.setState({\n          selectedIndex: nextProps.selectedIndex\n        });\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        onSelect: this.onSelect,\n        size: this.props.size,\n        thickness: this.props.thickness,\n        color: this.props.color,\n        highlightColor: this.props.highlightColor\n      };\n    }\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(index, value) {\n      this.setState({\n        selectedIndex: index\n      });\n      if (this.props.onSelect) this.props.onSelect(index, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var radioButtons = React.Children.map(this.props.children, function (radioButton, index) {\n        var isSelected = _this2.state.selectedIndex == index;\n        var color = isSelected && _this2.props.activeColor ? _this2.props.activeColor : _this2.props.color;\n        return React.createElement(RadioButton, _extends({\n          color: color,\n          activeColor: _this2.props.activeColor\n        }, radioButton.props, {\n          index: index,\n          isSelected: isSelected\n        }), radioButton.props.children);\n      });\n      return React.createElement(View, {\n        style: this.props.style\n      }, radioButtons);\n    }\n  }]);\n\n  return RadioGroup;\n}(Component);\n\nexport { RadioGroup as default };\nRadioGroup.childContextTypes = {\n  onSelect: PropTypes.func.isRequired,\n  size: PropTypes.number.isRequired,\n  thickness: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  activeColor: PropTypes.string,\n  highlightColor: PropTypes.string\n};\nRadioGroup.defaultProps = {\n  size: defaultSize,\n  thickness: defaultThickness,\n  color: defaultColor,\n  highlightColor: null\n};","map":{"version":3,"sources":["/Users/jacob/Desktop/Term 3/217/summarization/frontend/node_modules/react-native-flexi-radio-button/lib/radioGroup.js"],"names":["React","Component","PropTypes","RadioButton","defaultSize","defaultThickness","defaultColor","RadioGroup","props","context","state","selectedIndex","prevSelected","onSelect","bind","nextProps","setState","size","thickness","color","highlightColor","index","value","radioButtons","Children","map","children","radioButton","isSelected","activeColor","style","childContextTypes","func","isRequired","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  StyleSheet,\n  View,\n  Text,\n} from 'react-native';\n\nimport RadioButton from './radioButton'\n\nconst defaultSize = 20\nconst defaultThickness = 1\nconst defaultColor = '#007AFF'\n\nexport default  class RadioGroup extends Component{\n    constructor(props, context){\n        super(props, context)\n\n        this.state = {\n            selectedIndex: this.props.selectedIndex,\n        }\n        this.prevSelected = this.props.selectedIndex\n        this.onSelect = this.onSelect.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.selectedIndex != this.prevSelected){\n            this.prevSelected = nextProps.selectedIndex\n            this.setState({\n                selectedIndex: nextProps.selectedIndex\n            })\n        }\n\t}\n\n    getChildContext() {\n        return {\n            onSelect: this.onSelect ,\n            size: this.props.size,\n            thickness: this.props.thickness,\n            color: this.props.color,\n            highlightColor: this.props.highlightColor\n        };\n    }\n\n    onSelect(index, value){\n        this.setState({\n            selectedIndex: index\n        })\n        if(this.props.onSelect)\n            this.props.onSelect(index, value)\n    }\n\n    render(){\n        var radioButtons = React.Children.map(this.props.children, (radioButton, index) => {\n            let isSelected = this.state.selectedIndex == index\n            let color = isSelected && this.props.activeColor?this.props.activeColor:this.props.color\n            return (\n                <RadioButton\n                    color={color}\n                    activeColor={this.props.activeColor}\n                    {...radioButton.props}\n                    index={index}\n                    isSelected={isSelected}\n                >\n                    {radioButton.props.children}\n                </RadioButton>\n            )\n        })\n\n        return(\n            <View style={this.props.style}>\n                {radioButtons}\n            </View>\n        )\n    }\n}\n\nRadioGroup.childContextTypes = {\n    onSelect: PropTypes.func.isRequired,\n    size: PropTypes.number.isRequired,\n    thickness: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    activeColor: PropTypes.string,\n    highlightColor: PropTypes.string,\n}\n\nRadioGroup.defaultProps = {\n    size: defaultSize,\n    thickness: defaultThickness,\n    color: defaultColor,\n    highlightColor: null,\n}\n"]},"metadata":{},"sourceType":"module"}