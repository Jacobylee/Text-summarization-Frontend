{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport axios from 'axios';\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { RadioGroup, RadioButton } from \"react-native-flexi-radio-button\";\nimport Test from \"./test\";\nexport default function App() {\n  var URLs = 'http://localhost:8000/';\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      news = _React$useState2[0],\n      onChangeNews = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      summary = _React$useState4[0],\n      setSummary = _React$useState4[1];\n\n  var _React$useState5 = React.useState(-1),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedmode = _React$useState6[0],\n      setselectedmode = _React$useState6[1];\n\n  var getData = function getData(bb) {\n    var feedback, _feedback;\n\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(selectedmode);\n            _context.prev = 1;\n\n            if (!(selectedmode == 0)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(URLs + 'normal_summary?text=' + bb));\n\n          case 5:\n            feedback = _context.sent;\n            console.log(feedback.data.summary);\n            setSummary(feedback.data.summary);\n            _context.next = 19;\n            break;\n\n          case 10:\n            if (!(selectedmode == 1)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(axios.get(URLs + 'lexrank_summary?text=' + bb));\n\n          case 13:\n            _feedback = _context.sent;\n            console.log(_feedback.data.summary);\n            setSummary(_feedback.data.summary);\n            _context.next = 19;\n            break;\n\n          case 18:\n            console.log('@');\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"fail\");\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 21]], Promise);\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  return React.createElement(Test, null);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 4,\n    justifyContent: 'center',\n    width: '50%',\n    height: '30%',\n    alignItems: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 0\n  },\n  inputContainer: {\n    height: '90%',\n    width: '100%',\n    borderWidth: 2,\n    borderColor: '#F6ECEA'\n  },\n  input: {\n    paddingVertical: 0,\n    paddingLeft: 5,\n    fontSize: 20,\n    lineHeight: 34,\n    fontFamily: 'serif',\n    height: '100%'\n  },\n  a: {\n    flex: 4,\n    justifyContent: 'center',\n    width: '50%',\n    height: '90%',\n    alignItems: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 0,\n    flexDirection: 'colunm',\n    backgroundColor: '#F9F9DB',\n    borderRadius: 20\n  },\n  b: {\n    shadowColor: 'black',\n    shadowRadius: 5,\n    shadowOpacity: 0.5,\n    shadowOffset: {\n      width: 0,\n      height: 0\n    }\n  },\n  backgroundImage: {\n    width: '100%',\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["/Users/jacob/Desktop/Term 3/217/summarization/frontend/App.js"],"names":["React","useEffect","useState","axios","TextInput","RadioGroup","RadioButton","Test","App","URLs","news","onChangeNews","summary","setSummary","selectedmode","setselectedmode","getData","bb","console","log","get","feedback","data","styles","StyleSheet","create","container","flex","justifyContent","width","height","alignItems","paddingHorizontal","paddingBottom","inputContainer","borderWidth","borderColor","input","paddingVertical","paddingLeft","fontSize","lineHeight","fontFamily","a","flexDirection","backgroundColor","borderRadius","b","shadowColor","shadowRadius","shadowOpacity","shadowOffset","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, StyleSheet, Text, View, Image, ImageBackground } from \"react-native\";\nimport axios from 'axios'\nimport { TextInput } from \"react-native-gesture-handler\";\nimport {RadioGroup, RadioButton} from \"react-native-flexi-radio-button\"\nimport Test from \"./test\";\n\n\nexport default function App() {\n  const URLs = 'http://localhost:8000/'\n  const [news, onChangeNews] = React.useState(null);\n  const [summary, setSummary] = React.useState('');\n  const [selectedmode, setselectedmode] = React.useState(-1);\n  \n  const getData = async (bb) => {\n      console.log(selectedmode)\n      try {\n          if (selectedmode == 0){\n            const feedback = await axios.get(URLs + 'normal_summary?text=' + bb)\n            console.log(feedback.data.summary)\n            setSummary(feedback.data.summary)\n          } else if (selectedmode == 1){\n            const feedback = await axios.get(URLs + 'lexrank_summary?text=' + bb)\n            console.log(feedback.data.summary)\n            setSummary(feedback.data.summary)\n          } else {\n            console.log('@')\n          }\n      } catch(e) {\n          console.log(\"fail\")\n      }\n  }\n\n  useEffect(() => {\n      getData()\n  }, [])\n\n  return (\n    // <ImageBackground source={require('./assets/images/bg.png')} style={{width: '100%', height: '100%'}} resizeMode={\"cover\"}>\n\n    //    <View style={{alignItems:'center', justifyContent:'center', flex:12}}>\n    //     <View style = {{flex:2, justifyContent: 'center'}}>\n    //       <Text style = {{fontSize: 60, fontWeight: \"bold\", fontFamily: 'serif'}}> News Summarizer </Text>\n    //     </View>\n\n    //     <View style={{flex:10, width:'90%', flexDirection:'row', alignItems:'center'}}>\n    //       {/* <View style = {styles.container} > */}\n    //       <View style = {[styles.a, styles.b]} >\n    //         <View style = {styles.inputContainer}>\n    //           <TextInput\n    //               placeholder = {'Input Your News'} \n    //               placeholderTextColor = {'#BBBBBB'}\n    //               onChangeText = {text => onChangeNews(text)}\n    //               multiline\n    //               style = {styles.input}\n    //           />\n    //         </View>      \n    //       </View>\n          \n    //       <View style={{justifyContent:'center', alignItems:'center', flex:2}}><Image style={{width: 100, height: 100,}} source={require(\"./assets/images/arror.gif\")}/></View>\n\n    //       <View style = {[styles.a, styles.b]} >\n    //         <View style = {styles.inputContainer}>\n    //           <TextInput\n    //               value = {summary} \n    //               placeholderTextColor = {'#BBBBBB'}\n    //               multiline\n    //               style = {styles.input}\n    //           />\n    //         </View>      \n    //       </View>\n    //     </View>\n\n    //     <View style = {{flex:2, justifyContent: 'center'}}>\n\n    //     <View>\n    //       <RadioGroup\n    //         onSelect = {(value) => setselectedmode(value)}\n    //       >\n    //         <RadioButton value={'item1'} >\n    //           <Text>None-NLP algrithom</Text>\n    //         </RadioButton>\n\n    //         <RadioButton value={'item2'}>\n    //           <Text>LexRank</Text>\n    //         </RadioButton>\n\n    //         <RadioButton value={'item3'}>\n    //           <Text>This is item #3</Text>\n    //         </RadioButton>\n    //       </RadioGroup>\n    //     </View>\n\n    //       <Button\n    //           color='grey' \n    //           title='Generate Summary'\n    //           onPress = {() => {getData(news);}}\n    //       />\n    //     </View>\n\n    //   </View>\n\n    //   </ImageBackground>\n    <Test></Test>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:4,\n    justifyContent: 'center',\n    width: '50%',\n    height: '30%',\n    alignItems: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 0\n  },\n  inputContainer: {\n    height: '90%',\n    width: '100%',\n    borderWidth: 2,\n    borderColor: '#F6ECEA'\n  },\n  input: {\n    paddingVertical: 0, \n    paddingLeft: 5, \n    fontSize: 20, \n    lineHeight: 34,\n    fontFamily: 'serif',\n    height: '100%'\n  },\n  a: {\n    flex:4, \n    justifyContent: 'center',\n    width: '50%',\n    height: '90%',\n    alignItems: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 0,\n    flexDirection:'colunm', \n    backgroundColor:'#F9F9DB', \n    borderRadius:20,\n  }, \n  b: {\n      shadowColor: 'black',\n      shadowRadius: 5,\n      shadowOpacity: 0.5,\n      shadowOffset: {width: 0, height:0},\n  },\n  backgroundImage:{ \n    width:'100%', \n    height:'100%', \n  }\n});\n"]},"metadata":{},"sourceType":"module"}